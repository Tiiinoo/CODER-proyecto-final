/* SASS */
/* OPERACIONES: Para hacerlas, ¿cómo separar en términos? se separa por signos de + y -, sí hay un paréntesis 
se resuelve primero */
/* CONDICIONALES: ALGO que va a suceder si se cumple otra COSA. If se cumple esto, hacer esta variable */
/* IF: Condicional. Comparadores ==, !=, <, >, =>, =<. Nuestra condición nos permite comparar dos o más 
cosas. El resultado del IF es verdadero o falso. Si es verdadero se ejecuta algo, si es falso, puede 
ejecutarse algo o nada. 
Ejemplo= $animal: gato;
          @if $animal == gato {
            color: blue;
           } @else {
             color: black;
            }
          }
El else permite que si el if no es verdadero, permite agregar otra opción.
Podemos anidar IF, se coloca if $ == algo {
                              variable} @else if {
                                variable}
                              } */
/* Si se ejecuta el primer if, ignora el resto, por eso es importante usar else if, para que se ejecute 
a menor cantidad de codigo posible y código sea mejor la performance */ 

/* BUCLES: Es una secuencia que se repite hasta que de una condición y frene. VER LA DIAPOSITIVA, ESTÁ CLARO.
Tipos de Bucles: FOR (significa para) cómo se llama? @for $i from start to/through end {
                                                          .casitodos-#{$i} {width: 2em * $i;}*/

/* EACH: es otro ciclo, pero genera una lista de valores y la recorre. 
El ejemplo sería: 
                  @each $animal in puma, gato, perro, canario, raton {
                  .#{$animal}-icon {
                   background-image: url('/images/#{$animal}.png');
                    }
                  } */ 

/* MAPS: son variables que contienen una colección de variables.
Ejemplo:      $redes: (
              twitter: #5668ff,
              facebook: #ffrr55,
              send-mail: #ef4455,
              );
              @each $red, $color in $redes {
              .btn--#{$red} {
              background-color: $color;
                }
              }
Probar en SassMeister */

/* EXTEND: sirve para extender y modificar, si es necesario, propiedades de CSS VER EL EJEMPLO EN LA
DIAPOSITIVA, SUPER CLARO! Se llama con @extend.nombredelaclasequetienelaspropiedades
Ejemplo: 
        .titulo {
          font-family:arial;
          font-size: 32px;
          color: #ffffff;
          text-decoration: underline;
        }
        .subtitulo {
          @extend.titulo;
          /*cambio el tamaño y text decoration
          font-size: 20px;
          text-decoration: none;
          /* y agrego algo
          font-weight: bolder;
        }*/ 


/* MIXINS: en otros lenguajes son funciones. Agrupamos cierta cantidad de código que puede tener 
todo lo anterior que vimos, y le ponemos un nombre, después le pasamos parámetros para que se genera
mi código con esos parámetros 
Ejemplo=
        @mixin buttons ($bgcolor, $fontcolor, $fontsize, $margin) {
        background: $bgcolor;
        color: $fontcolor;
        width: 300px;
        height: 90px;
        border-radius: 3px;
        font-family: verdana;
        font-size: $fontsize;
        margin: $margin;
        }
        ..btn-red {
        @include buttons(#ff0000, #ffffff, 14px, 15px)
        }
        .btn-green {
        @include buttons(#454677, #ffffff, 30px, 45px)
        }*/ 